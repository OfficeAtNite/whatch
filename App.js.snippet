import React, { useState, useEffect } from 'react';
import VideoBackground from './components/VideoBackground';
import SearchForm from './components/SearchForm';
import MovieList from './components/MovieList';
import ThemeToggle from './components/ThemeToggle';
import { fetchMovieRecommendations } from './services/aiService';
import { fetchMovieDetails } from './services/movieService';
import './App.css';

function App() {
  const [theme, setTheme] = useState('dark');
  const [isSearching, setIsSearching] = useState(false);
  const [searchQuery, setSearchQuery] = useState('');
  const [movies, setMovies] = useState([]);
  const [isLoading, setIsLoading] = useState(false);

  // Load theme from localStorage on initial render
  useEffect(() => {
    const savedTheme = localStorage.getItem('theme') || 'dark';
    setTheme(savedTheme);
    document.documentElement.classList.toggle('dark', savedTheme === 'dark');
  }, []);

  // Toggle between light and dark mode
  const toggleTheme = () => {
    const newTheme = theme === 'dark' ? 'light' : 'dark';
    setTheme(newTheme);
    localStorage.setItem('theme', newTheme);
    document.documentElement.classList.toggle('dark', newTheme === 'dark');
  };

  // Handle search submission
  const handleSearch = async (query) => {
    setSearchQuery(query);
    setIsSearching(true);
    setIsLoading(true);
    
    try {
      // Get movie recommendations from AI models
      const recommendations = await fetchMovieRecommendations(query);
      
      // Fetch additional details for each movie
      const moviesWithDetails = await Promise.all(
        recommendations.map(movie => fetchMovieDetails(movie.title))
      );
      
      setMovies(moviesWithDetails);
    } catch (error) {
      console.error('Error fetching recommendations:', error);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className={`app ${theme}`}>
      <VideoBackground isSearching={isSearching} />
      
      <div className="container mx-auto px-4 relative z-10">
        <ThemeToggle theme={theme} toggleTheme={toggleTheme} />
        
        <div className={`transition-all duration-500 ${isSearching ? 'pt-8' : 'h-screen flex items-center justify-center'}`}>
          <SearchForm 
            onSearch={handleSearch} 
            isSearching={isSearching}
          />
        </div>
        
        {isSearching && (
          <div className="py-8">
            {isLoading ? (
              <div className="flex justify-center">
                <div className="loader">Loading...</div>
              </div>
            ) : (
              <MovieList movies={movies} />
            )}
          </div>
        )}
      </div>
    </div>
  );
}

export default App;